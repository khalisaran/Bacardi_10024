package com.bacardi.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.bacardi.domain.core.Bacardi;

import com.bacardi.config.BacardiSwaggerUIConstants;

import com.bacardi.service.Bacardi_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/Bacardi_Default_Activity", description = "Bacardi_Default_Activity of Bacardi_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("Bacardi_Default_ActivityController")
@RequestMapping("/Bacardi_Default_Activity")
public class Bacardi_Default_ActivityController  extends BaBaseController implements BacardiSwaggerUIConstants {

private static Logger log = Logger.getLogger(Bacardi_Default_ActivityController.class.getName());

	private Bacardi_Default_ActivityService Bacardi_Default_Activity_service;


	public Bacardi_Default_ActivityService get_Bacardi_Default_Activity_service() {
		return Bacardi_Default_Activity_service;
	}


	@Resource(name="Bacardi_Default_ActivityService")
	public void set_Bacardi_Default_Activity_service(Bacardi_Default_ActivityService Bacardi_Default_Activity_service) {
		this.Bacardi_Default_Activity_service = Bacardi_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  Bacardi noun into database
	* @param the_Bacardi
	*@return Bacardi object will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_Bacardi", httpMethod = "POST",notes = "creates a noun of Bacardi",response = Bacardi.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = BacardiSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = BacardiSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = BacardiSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = BacardiSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = BacardiSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_Bacardi" ,headers="Accept=application/json")
    @ResponseBody
	public Bacardi create_Bacardi(@RequestBody Bacardi the_Bacardi) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_Bacardi controller started operation!");

		Bacardi a_Bacardi;

		a_Bacardi = Bacardi_Default_Activity_service.create_bacardi(the_Bacardi, super.getUser());

		log.info("Object returned from create_Bacardi method !");

		return a_Bacardi;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  Bacardi noun into database
	*@param the_Bacardi
	*@return Bacardiobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_Bacardi", httpMethod = "PUT",notes = "updates a noun of Bacardi",response = Bacardi.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = BacardiSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = BacardiSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = BacardiSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = BacardiSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = BacardiSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_Bacardi" ,headers="Accept=application/json")
    @ResponseBody
	public Bacardi update_Bacardi(@RequestBody Bacardi the_Bacardi) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_Bacardi controller started operation!");

		Bacardi a_Bacardi;

		a_Bacardi = Bacardi_Default_Activity_service.update_bacardi(the_Bacardi, super.getUser());

		log.info("Object returned from update_Bacardi method !");

		return a_Bacardi;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  Bacardi noun from  database based on given noun id
	*@param Bacardi_id
	*@return Bacardiobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_Bacardi/{Bacardi_id}", httpMethod = "GET",notes = "updates a noun of Bacardi",response = Bacardi.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = BacardiSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = BacardiSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = BacardiSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = BacardiSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = BacardiSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_Bacardi/{Bacardi_id}" ,headers="Accept=application/json")
    @ResponseBody
	public Bacardi search_for_update_Bacardi(@PathVariable("Bacardi_id")long Bacardi_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_Bacardi controller started operation!");

		Bacardi the_Bacardi = new Bacardi();

		the_Bacardi = Bacardi_Default_Activity_service.bacardi_search_for_update(Bacardi_id, super.getUser());

		log.info("Object returned from search_for_update_Bacardi method !");

		return the_Bacardi;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  Bacardi noun from  database based on given noun id
	*@param Bacardi_id
	*@return Bacardiobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_Bacardi/{Bacardi_id}", httpMethod = "DELETE",notes = "deletes a noun of Bacardi",response = Bacardi.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = BacardiSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = BacardiSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = BacardiSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = BacardiSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = BacardiSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_Bacardi/{Bacardi_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_Bacardi(@PathVariable("Bacardi_id")long Bacardi_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_Bacardi controller started operation!");

		String service_return_msg = "";

		service_return_msg = Bacardi_Default_Activity_service.delete_bacardi(Bacardi_id, super.getUser());

		log.info("Object returned from delete_Bacardi method !");

		return service_return_msg;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  Bacardi noun from  database
	*
	*@return List of Bacardi objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_Bacardi", httpMethod = "GET",notes = "special search that gets all values of Bacardi",response = Bacardi.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = BacardiSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = BacardiSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = BacardiSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = BacardiSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = BacardiSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_Bacardi" ,headers="Accept=application/json")
    @ResponseBody
	public List<Bacardi> get_all_Bacardi() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_Bacardi controller started operation!");

		List<Bacardi> Bacardi_list = new ArrayList<Bacardi>();

		Bacardi_list = Bacardi_Default_Activity_service.get_all_bacardi();

		log.info("Object returned from get_all_Bacardi method !");

		return Bacardi_list;


	}




}