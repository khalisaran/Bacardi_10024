// ***** Import Section ***** //
import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os
import java.io.*
import groovy.json.*

// ***** Build Script Dependencies Section ***** //
buildscript {
  repositories {
    jcenter()
  }
   dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
  }
}

apply plugin: 'groovy'
apply plugin :'java'
apply plugin: 'org.hidetake.ssh'

// ***** Properties Section ***** //
project.ext {
  projOrgSourceDirName = propOrgSourceDirName
  projMacPassword = propMacPassword
   //======APK file from  .git config part===//
   iosProjectName = iosAppName
   ipaUploadSucessJsonFile = getappIdFile
   deleteExistIPA = deleteExistingIPA
   installrUserTokenId = installrTokenId
   configFileXmlContent = configFileXml
   configFileLoc = configFileLocation
   configWidgetID = configFileWidgetID

   //Tablet
   iosTabletAppName = iosTabletAppName
   tabletnewWwwContent = tabletnewWwwContent
   getTabletappIdFile = getTabletappIdFile
   tabletconfigFileLocation = tabletconfigFileLocation
   deleteExistTabletWwwContent = deleteExistTabletWwwContent
   deleteExistingTabletIPA = deleteExistingTabletIPA

  // ===== Email Config. Part ===== //
  projEmailReceiver = propEmailReceiver
  configJsonFile = configJson
  configJsonLoc = configJsonLocation

  appid= ''
  latestId=''
  appToken=''
}
   repositories {
        mavenCentral()
   }

 configurations {
  driver
  antClasspath
  }


dependencies {
  antClasspath 'ant:ant-javamail:1.6.5', 'javax.activation:activation:1.1.1', 'javax.mail:mail:1.5.0-b01'
}


URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each { File file ->
  loader.addURL(file.toURL())
}

ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antClasspath.each { File jar ->
  antClassLoader.addURL( jar.toURI().toURL() )
}

//mobile
task deleteExistingIPA() << {
exec{
  commandLine 'sh','-c',deleteExistIPA //del
}
println 'Existing IPA file deleted..!!!'
}

//************To build IPA *************//
task buildIPAFile(dependsOn:'deleteExistingIPA') << {
  exec {
   commandLine 'bash', 'start_execution.sh', 'executeXcodeIpaBuild'
  }
  println 'IPA File Generated..!'
}

//***********Upload IPA into Installr***********//
task shareTheApp(dependsOn: 'buildIPAFile') << {
  exec{
    commandLine 'echo','------------------------------------'
  }
  //upload()
}

task getAppId(dependsOn:'shareTheApp')<< {
  def json = new JsonSlurper().parse(file (ipaUploadSucessJsonFile),"UTF-8")
  appid=json.appData.latestBuild.id
  latestId=json.appData.id
  appToken=json.appData.latestBuild.buildFile.url
  println "--------------latestBuild----------- \n" +json.appData.latestBuild.id +"----"+latestId
  println '----------------installr Url--------- \n'+json.appData.latestBuild.buildFile.url
}
task deployIPA (dependsOn:'getAppId') << {
  String v=  'sh sendInvites.sh sendInvitesTotesters '+latestId+' '+appid+' '+projEmailReceiver
  println v
  runCmd(v)
  println 'Testers invited for IOS application'
}

// Tablet
task deleteExistingTabletIPA() << {
exec{
  commandLine 'sh','-c',deleteExistingTabletIPA //del
}
println 'Existing Tablet IPA file deleted..!!!'
}

//************To build IPA *************//
task buildTabletIPAFile(dependsOn:'deleteExistingTabletIPA') << {
  exec {
   commandLine 'bash', 'start_execution.sh', 'executeXcodeIpaBuildTablet'
  }
  println ' Tablet IPA File Generated..!'
}

//***********Upload IPA into Installr***********//
task shareTheTabletApp(dependsOn: 'buildTabletIPAFile') << {
  exec{
    commandLine 'echo','------------------------------------'
  }
  //upload()
}

task getTabletAppId(dependsOn:'shareTheTabletApp')<< {
  def json = new JsonSlurper().parse(file (getTabletappIdFile),"UTF-8")
  appid=json.appData.latestBuild.id
  latestId=json.appData.id
  appToken=json.appData.latestBuild.buildFile.url
  println "--------------latestBuild---Tablet-------- \n" +json.appData.latestBuild.id +"----"+latestId
  println '----------------installr Url--- Tablet------ \n'+json.appData.latestBuild.buildFile.url
}
task deploytabletIPA (dependsOn:'getTabletAppId') << {
  String v=  'sh sendInvites.sh sendInvitesTotesters '+latestId+' '+appid+' '+projEmailReceiver
  println v
  runCmd(v)
  println 'Testers invited for Tablet IOS application'
}

def buildIPA() {
  println 'gonna build IPA'
  runCmd('bash  start_execution.sh  executeXcodeIpaBuild')
}
def upload() {
  println 'Uploading IPA...'
  runCmd('bash start_execution.sh UploadIPAfile')
}

// Executing the Commands
def runCmd(command) {
  def process = command.execute()
  process.waitFor()
  println process.err.text
  println process.in.text
}
